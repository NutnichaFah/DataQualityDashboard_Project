from flask import request, render_template, session,jsonify
from sqlalchemy import func, and_, not_, case

from ..app import app
from .. import db
from ..models.qualities_models import Data_quality_metrics as dq
from ..models.packages_models import package
from ..models.resources_models import resource
from ..models.group_models import group
from ..models.member_models import member


# ######################### Dashboard #########################
@app.route("/dashboard")
def dashboard():
    ####### Openness ######
    openness_query_table = db.session.query(dq.openness, func.count(dq.openness)).where(dq.openness != None).group_by(dq.openness) #asc
    # ordered_query = openness_query_table.order_by(dq.openness.desc()).order_by(dq.openness.asc()) #desc
    
    one_star = openness_query_table.filter(dq.openness == 1).all()
    two_star = openness_query_table.filter(dq.openness == 2).all()
    three_star = openness_query_table.filter(dq.openness == 3).all()
    
    ####### Downloadable ######
    dowloadable_query_table = db.session.query(dq.downloadable, func.count(dq.downloadable)).group_by(dq.downloadable)
    one_do = dowloadable_query_table.filter(dq.downloadable == 1).all()
    two_do = dowloadable_query_table.filter(dq.downloadable == 2).all()
    zero_do = dowloadable_query_table.filter(dq.downloadable == 0).all()

    ####### Access API ######
    api_query_table = db.session.query(dq.access_api, func.count(dq.access_api)).group_by(dq.access_api)
    one_api = api_query_table.filter(dq.access_api == 1).all()
    two_api = api_query_table.filter(dq.access_api == 2).all()
    zero_api = api_query_table.filter(dq.access_api == 0).all()

    ###### Machine Readable ######
    # Pagination
    page_num = request.args.get('page_num', 1, type=int)
    per_page = 10
    machine_readable_table = db.session.query(dq, package)\
                                .join(package, dq.ref_id == package.id)\
                                .paginate(page=page_num, per_page=per_page)

    # Bar Chart
    mc0 = db.session.query(func.count(dq.machine_readable)).filter(and_(dq.machine_readable >= 0, dq.machine_readable <= 50)).scalar()
    mc51 = db.session.query(func.count(dq.machine_readable)).filter(and_(dq.machine_readable >= 51, dq.machine_readable <= 80)).scalar()
    mc81 = db.session.query(func.count(dq.machine_readable)).filter(and_(dq.machine_readable >= 81, dq.machine_readable <= 90)).scalar()
    mc91 = db.session.query(func.count(dq.machine_readable)).filter(and_(dq.machine_readable >= 91, dq.machine_readable <= 100)).scalar()

    ###### Timeliness ######
    on_time_dt = db.session.query(func.count(dq.timeliness)).filter(dq.timeliness >= 0).all()
    one_month_time_dt = db.session.query(func.count(dq.timeliness)).filter(and_(dq.timeliness > -30, dq.timeliness < 0)).all()
    three_month_timed_dt = db.session.query(func.count(dq.timeliness)).filter(dq.timeliness < -30).all()

    on_time = on_time_dt[0][0]
    one_month_time = one_month_time_dt[0][0]
    three_month_time = three_month_timed_dt[0][0]

# รอใส่ เงื่อนไข filter กระทรวงกับหน่วยงาน เข้าไปด้วย
    # Number Count-Score card
    org_count = (
        db.session.query(func.count(func.distinct(package.maintainer)))
        .filter(package.state == 'active')
        .scalar()
)
    package_count = (
        db.session.query(func.count(dq.type))
            .filter(dq.type == 'package')
            .scalar()
    )
    resource_count = (
        db.session.query(func.count(dq.type))
            .filter(dq.type == 'resource')
            .scalar()
    )
    # resource_in_package_count = (
    #     db.session.query(func.count(resource.id))
    #         .join(dq, resource.id == dq.ref_id)
    #         .filter(resource.package_id == selected_package_id)
    #         .scalar()
    # )


    return render_template("dashboard/dashboard.html", the_title="Data Quality Metrics Dashboard",
                           openness_query_table=openness_query_table, one_star=one_star, two_star=two_star, three_star=three_star, 
                           one_do=one_do, two_do=two_do, zero_do=zero_do,
                           one_api=one_api, two_api=two_api,zero_api=zero_api,
                           machine_readable_table=machine_readable_table, mc0=mc0, mc51=mc51, mc81=mc81, mc91=mc91,
                           on_time=on_time, one_month_time=one_month_time, three_month_time=three_month_time,
                           org_count=org_count, package_count=package_count, resource_count=resource_count
                           )



# ######################### Dashboard #########################
@app.route("/dashboardold")
def dashboardold():
    ####### Openness ######
    openness_query_table = db.session.query(dq.openness, func.count(dq.openness)).where(dq.openness != None).group_by(dq.openness) #asc
    # ordered_query = openness_query_table.order_by(dq.openness.desc()).order_by(dq.openness.asc()) #desc
    
    one_star = openness_query_table.filter(dq.openness == 1).all()
    two_star = openness_query_table.filter(dq.openness == 2).all()
    three_star = openness_query_table.filter(dq.openness == 3).all()
    
    ####### Downloadable ######
    dowloadable_query_table = db.session.query(dq.downloadable, func.count(dq.downloadable)).group_by(dq.downloadable)
    one_do = dowloadable_query_table.filter(dq.downloadable == 1).all()
    two_do = dowloadable_query_table.filter(dq.downloadable == 2).all()
    zero_do = dowloadable_query_table.filter(dq.downloadable == 0).all()

    ####### Access API ######
    api_query_table = db.session.query(dq.access_api, func.count(dq.access_api)).group_by(dq.access_api)
    one_api = api_query_table.filter(dq.access_api == 1).all()
    two_api = api_query_table.filter(dq.access_api == 2).all()
    zero_api = api_query_table.filter(dq.access_api == 0).all()

    ###### Machine Readable ######
    # Pagination
    page_num = request.args.get('page_num', 1, type=int)
    per_page = 25
    machine_readable_table = db.session.query(dq, package)\
                                .join(package, dq.ref_id == package.id)\
                                .paginate(page=page_num, per_page=per_page)

    # Bar Chart
    mc0 = db.session.query(func.count(dq.machine_readable)).filter(and_(dq.machine_readable >= 0, dq.machine_readable <= 50)).scalar()
    mc51 = db.session.query(func.count(dq.machine_readable)).filter(and_(dq.machine_readable >= 51, dq.machine_readable <= 80)).scalar()
    mc81 = db.session.query(func.count(dq.machine_readable)).filter(and_(dq.machine_readable >= 81, dq.machine_readable <= 90)).scalar()
    mc91 = db.session.query(func.count(dq.machine_readable)).filter(and_(dq.machine_readable >= 91, dq.machine_readable <= 100)).scalar()

    ###### Timeliness ######
    on_time_dt = db.session.query(func.count(dq.timeliness)).filter(dq.timeliness >= 0).all()
    one_month_time_dt = db.session.query(func.count(dq.timeliness)).filter(and_(dq.timeliness > -30, dq.timeliness < 0)).all()
    three_month_timed_dt = db.session.query(func.count(dq.timeliness)).filter(dq.timeliness < -30).all()

    on_time = on_time_dt[0][0]
    one_month_time = one_month_time_dt[0][0]
    three_month_time = three_month_timed_dt[0][0]

# รอใส่ เงื่อนไข filter กระทรวงกับหน่วยงาน เข้าไปด้วย
    # Score card-Number Count
    org_count = (
        db.session.query(func.count(func.distinct(package.maintainer)))
        .filter(package.state == 'active')
        .scalar()
)
    package_count = (
        db.session.query(func.count(dq.type))
            .filter(dq.type == 'package')
            .scalar()
    )
    resource_count = (
        db.session.query(func.count(dq.type))
            .filter(dq.type == 'resource')
            .scalar()
    )
    # resource_in_package_count = (
    #     db.session.query(func.count(resource.id))
    #         .join(dq, resource.id == dq.ref_id)
    #         .filter(resource.package_id == selected_package_id)
    #         .scalar()
    # )


    return render_template("dashboard/dashboard_old.html", the_title="Data Quality Metrics Dashboard",
                           openness_query_table=openness_query_table, one_star=one_star, two_star=two_star, three_star=three_star, 
                           one_do=one_do, two_do=two_do, zero_do=zero_do,
                           one_api=one_api, two_api=two_api,zero_api=zero_api,
                           machine_readable_table=machine_readable_table, mc0=mc0, mc51=mc51, mc81=mc81, mc91=mc91,
                           on_time=on_time, one_month_time=one_month_time, three_month_time=three_month_time,
                           org_count=org_count, package_count=package_count, resource_count=resource_count
                           )



























